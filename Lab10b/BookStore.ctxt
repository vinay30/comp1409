#BlueJ class context
comment0.params=
comment0.target=BookStore()
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ BookStore\n
comment1.params=businessName
comment1.target=BookStore(java.lang.String)
comment1.text=\n\ Non-default\ Constructor\ for\ objects\ of\ class\ BookStore\n\n\ @param\ businessName\ A\ parameter\ containing\ the\ new\ business\ name\ of\ the\ book\ store\n
comment2.params=
comment2.target=java.lang.String\ getBusinessName()
comment2.text=\n\ Method\ getBusinessName\ which\ returns\ the\ business\ name\ of\ the\ book\ store\n\n\ @return\ The\ return\ value\ which\ is\ a\ string\ of\ the\ business\ name\n
comment3.params=
comment3.target=java.util.ArrayList\ getBooklist()
comment3.text=\n\ Method\ getBooklist\ which\ returns\ the\ arraylist\ containing\ all\ the\ book\ objects\n\n\ @return\ The\ return\ value\ which\ is\ the\ arrayList\ containing\ book\ objects\n
comment4.params=businessName
comment4.target=void\ setBusinessName(java.lang.String)
comment4.text=\n\ Method\ setBusinessName\ which\ validates\ and\ sets\ the\ new\ business\ name\ of\ the\ book\ store\ from\ a\ passed\ in\n\ parameter.\ If\ the\ parameter\ is\ invalid,\ the\ business\ name\ is\ not\ changed.\n\n\ @param\ businessName\ A\ parameter\ containing\ the\ new\ business\ name\n
comment5.params=book
comment5.target=void\ addBook(Book)
comment5.text=\n\ Method\ addBook\ which\ validates\ the\ passed\ in\ book\ object,\ then\ adds\ it\ to\ the\ end\ of\ the\ booklist\ arraylist\n\ If\ the\ book\ object\ fails\ validation,\ an\ error\ message\ is\ displayed\n\n\ @param\ book\ A\ parameter\ containing\ a\ book\ object\ to\ be\ added\ to\ the\ booklist\ arraylist\n
comment6.params=bookIndex
comment6.target=void\ getBook(int)
comment6.text=\n\ Method\ getBook\ which\ uses\ a\ passed\ in\ parameter\ containing\ an\ arraylist\ index\ to\ retrieve\ the\ object\n\ at\ the\ specified\ index\ from\ the\ booklist\ arraylist.\ The\ parameter\ is\ validated\ before\ being\ used.\n\ If\ the\ index\ in\ the\ parameter\ fails\ validation,\ an\ error\ message\ is\ displayed\n\n\ @param\ bookIndex\ A\ parameter\ containing\ an\ index\ value\ of\ the\ booklist\ arraylist\n
comment7.params=bookTitle
comment7.target=void\ findBook(java.lang.String)
comment7.text=\n\ Method\ findBook\ which\ takes\ a\ passed\ in\ parameter\ and\ searches\ the\ booklist\ arraylist\ for\ the\ book\ object\ with\n\ a\ title\ that\ matches\ the\ parameter\ string.\ If\ the\ book\ is\ found,\ the\ book's\ details\ are\ displayed.\ If\ the\n\ book\ is\ not\ found,\ an\ error\ message\ is\ displayed.\n\n\ @param\ bookTitle\ A\ parameter\ containing\ the\ book\ title\ search\ query\n
comment8.params=
comment8.target=void\ displayAllBooks()
comment8.text=\n\ Method\ displayAllBooks\ which\ iterates\ through\ each\ book\ object\ in\ the\ booklist\ arraylist\ and\ then\ displays\n\ the\ details\ of\ each\ book\ within\ the\ arraylist.\ In\ this\ way,\ we\ see\ the\ details\ of\ all\ books\ in\ the\ booklist\n\n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\n\ Method\ main\ which\ contains\ all\ statements\ that\ should\ be\ evaluated\ when\ the\ program\ is\ first\ run\n\n\ @param\ args\ A\ parameter\ containing\ arguments\ for\ the\ main\ method\ code\n
numComments=10
